{"name":"Clonejs","tagline":"The true prototype-based JavaScript micro-framework.","body":"## clone.js\r\n\r\nThis is the micro-framework that implements the true [prototype-based OOP⠙](http://en.wikipedia.org/wiki/Prototype-based_programming) in JS.\r\nIt's based on the new ECMA Script 5 features like [`Object.create`⠙](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create) and [property descriptors⠙](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty).\r\n\r\n[Download clonejs-latest.zip](http://github.com/quadroid/clonejs/archive/master.zip)\r\n\r\n### See [API Documentation](http://quadroid.github.com/clonejs/symbols/%24object.html)\r\n\r\nThe main difference with other class-producing tools like `Ext.define`, `dojo.declare`, `Backbone.Model.extend`\r\nis that `$object.clone` will return an object (prototype with defined constructor-function) instead of function (with defined prototype-object). So, you don't need for instantiation, you can just start using the cloned object right now. But, if you need more than one instance, you can create it by `$yourProto.create`.\r\n\r\nQuick example:\r\n\r\n     var $myType = $object.clone({\r\n         '(final)  notConfigurableAndNotWritable': true,\r\n         '(writable final)   notConfigurableOnly': null,\r\n         '(hidden final get) notEnumerableGetter': function(){},\r\n         '(hidden)                 notEnumerable': true,\r\n         '(const)                       constant': 'not writable',\r\n                                  publicProperty : 1,\r\n                                           _item : null,// private property (not enumerable)\r\n                                     '(get) item': function() { return this._item },\r\n                                     '(set) item': function(v){ this._item = v },\r\n                      '(get) publicPropertyAlias': 'publicProperty',// automatically create getter for publicProperty\r\n                                     constructor : function MyType(){\r\n                                                       this.applySuper(arguments);\r\n                                                       // do something...\r\n                                                   }\r\n     });\r\n     var myTypeInstance = $myType.create({publicProperty: 2}/* constructor argument */);\r\n     assert( $myType.isPrototypeOf(myTypeInstance) );\r\n     assert( $myType.publicPropertyAlias === $myType.publicProperty );","google":"UA-1886659-9","note":"Don't delete this file! It's used internally to help with page regeneration."}
{"name":"Clonejs","tagline":"The true prototype-based JavaScript micro-framework.","body":"## clone.js\r\n\r\nThis is the micro-framework that implements the true [prototype-based OOP⠙][1] in JS.  \r\nIt's based on the ECMA Script 5 features like [`Object.create`⠙][2] and [property&nbsp;descriptors⠙][3].\r\n  [1]: http://en.wikipedia.org/wiki/Prototype-based_programming\r\n  [2]: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create\r\n  [3]: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty\r\n\r\n### See [API Documentation](http://quadroid.github.com/clonejs/symbols/%24object.html)\r\n\r\nThe main difference with other class-producing tools like `Ext.define`, `dojo.declare`, `Backbone.Model.extend` is that `$object.clone` will return an object (prototype with defined constructor-function) instead of function (with defined prototype-object).<br/>\r\nSo, you don't need for instantiation, you can just start using the cloned object right now.<br/>\r\nBut, if you need more than one instance, you can create it by `$yourProto.create`.\r\n\r\n\r\n###### Quick example (cloning):\r\n\r\n    var $myProto = {a:1, b:2, c:3};\r\n    var    clone = $object.clone.apply($myProto);\r\n         clone.a = 11; // $myProto.a still == 1\r\n      $myProto.b = 22; // clone.b will be also changed to 22\r\n\r\nSee: [clone][], [create][], [copy][], [deepCopy][], [deepClone][].\r\n\r\n###### Property modificators:\r\n\r\n    var $myType = $object.clone({\r\n        '(final)          property1': \"not configurable and not writable\",\r\n        '(writable final) property2': \"not configurable only\",\r\n        '(hidden)         property3': \"not enumerable\",\r\n        '(const)           constant': \"not writable\",\r\n                          property4 : \"simple property\",\r\n        '(get)       property3alias': 'property3',// automatically create getter\r\n                              _item : \"private property (not enumerable)\",\r\n                       '(get)  item': function() { return this._item },\r\n                       '(set)  item': function(v){ this._item = v    },\r\n                        constructor : function MyType(){\r\n                                          this.applySuper(arguments);\r\n                                          // do something...\r\n                                      }\r\n    });\r\n    assert( $myType.property3alias === $myType.property3 );\r\n\r\nSee: [describe][].\r\n\r\n###### Constructors & instantiation:\r\n\r\n    var myTypeInstance = $myType.create({property4: \"initialize simple property\"});\r\n        assert( $myType.isPrototypeOf(myTypeInstance) );\r\n\r\nSee: [constructor][], [create][], [applySuper][], [callSuper][], [createSuperSafeCallback][].\r\n\r\n###### Namespaces:\r\n\r\n    ns.extend('collection', {\r\n        $item:  {},\r\n        _items: {}\r\n    });\r\n    ns.collection.extend('arrayCollection', {_items: []});\r\n    \r\n    var $users = ns.collection.$arrayCollection.clone({\r\n        $item: {name: '', isAdmin: false},\r\n        constructor: function Users(items){\r\n            items.forEach(function(item){\r\n                var newItem = $object.create.call(this.$item, item);\r\n                this._items.push(newItem);\r\n            }, this);\r\n        }\r\n    });\r\n    ns.put('models.users', $users);\r\n\r\n    var users = ns.models.$users.create([{name: 'User1'}]);\r\n\r\nSee: [ns][], [ns.extend][], [ns.put][].\r\n\r\n[clone.js]:    http://quadroid.github.com/clonejs/\r\n[$object]:     http://quadroid.github.com/clonejs/symbols/%24object.html\r\n\r\n[clone]:       http://quadroid.github.com/clonejs/symbols/%24object.html#clone\r\n[create]:      http://quadroid.github.com/clonejs/symbols/%24object.html#create\r\n[copy]:        http://quadroid.github.com/clonejs/symbols/%24object.html#copy\r\n[deepCopy]:    http://quadroid.github.com/clonejs/symbols/%24object.html#deepCopy\r\n[deepClone]:   http://quadroid.github.com/clonejs/symbols/%24object.html#deepClone\r\n[describe]:    http://quadroid.github.com/clonejs/symbols/%24object.html#.describe\r\n[constructor]: http://quadroid.github.com/clonejs/symbols/%24object.html#constructor\r\n[applySuper]:  http://quadroid.github.com/clonejs/symbols/%24object.html#applySuper\r\n[callSuper]:   http://quadroid.github.com/clonejs/symbols/%24object.html#callSuper\r\n[createSuperSafeCallback]: http://quadroid.github.com/clonejs/symbols/%24object.html#createSuperSafeCallback\r\n\r\n[ns]:          http://quadroid.github.com/clonejs/symbols/ns.html\r\n[ns.extend]:   http://quadroid.github.com/clonejs/symbols/ns.html#extend\r\n[ns.put]:      http://quadroid.github.com/clonejs/symbols/ns.html#put","google":"UA-1886659-9","note":"Don't delete this file! It's used internally to help with page regeneration."}
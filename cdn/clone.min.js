// CloneJS.org v1.1.0-alpha
/*
 @cc_on @_jscript_version || @*/
'use strict';
void function (k) {
    function l() {
        function d(b, c, a) {
            if (void 0 !== a) {
                a = Object.getPrototypeOf(a) === b ? a : m(b, a);
                if (a.__inits__) {
                    var e = a.__inits__, f;
                    for (f in e)d.defineInitPropertyOf(a, f, e[f], {configurable: !0}, {configurable: !0, writable: !0, enumerable: !0});
                    delete a.__inits__
                }
                g(a, "parent$", {value: b, writable: !0, configurable: !0});
                return void 0 === c ? a : m(a, c)
            }
            return m(b, c || {})
        }

        function k(b, c) {
            c.__proto__ = b;
            return c
        }

        function l(b, c) {
            var a = Object.create(b), e;
            for (e in c)a[e] = c[e];
            return a
        }

        function r(b, c) {
            var a =
                c.hasOwnProperty("constructor") && (c.constructor.Init || c.constructor);
            if (!a || "Init" != a.name) {
                try {
                    if (!1 === a)var e = d.defineConstructorOf(b); else e = d.defineConstructorOf(a, "Init"), a.prototype !== b && (a.prototype = b)
                } catch (f) {
                    console && console.warn(f)
                }
                a = e
            }
            return new a(c)
        }

        function q(b, c, a) {
            var e = b.__proto__ || b;
            if (a.get || a.set) {
                var d = c[0].toUpperCase() + c.substring(1);
                b[c] = function (a) {
                    if (a)b["set" + d](a); else return b["get" + d](a)
                };
                a.get && (e["get" + d] = a.get);
                a.set && (e["set" + d] = a.set)
            } else a.enumerable ? b[c] = a.value :
                e[c] = a.value
        }

        function u(b) {
            function c(b, c) {
                var d = {a: "string 1", b: {object: 2}, c: 3, constructor: function (a) {
                    for (var b in a)this[b] = this[b]
                }};
                d.constructor.prototype = d;
                for (var e = 0, f = 0, g = Date.now(); f < c; ++e % 32 || (f = Date.now() - g))b(d, {a: "string", b1: function () {
                }, c1: 3});
                console && console.log("Profiling " + a[n].name + ": ", e, "/", f, "=", e / f);
                return e / f
            }

            var a = [r, l];
            "__proto__"in{} && a.push(k);
            for (var e = 0, d = 0, n = 0, h = a.length; n < h; n++) {
                var g = c(a[n], b || 33);
                g > d && (d = g, e = n)
            }
            return m = a[e]
        }

        var h;
        "object" === typeof p && p.injectClonePrototypeInto ?
            (h = p.injectClonePrototypeInto, d.prototype = h) : h = d.prototype;
        var m = "__proto__"in{} ? k : "create"in Object ? l : r, g = "defineProperty"in Object ? Object.defineProperty : q, v = "freeze"in Object ? Object.freeze : function () {
        };
        void 0 === Object.getPrototypeOf && (Object.getPrototypeOf = function (b) {
            return b.hasOwnProperty("__proto__") ? d.prototype : b.__proto__
        });
        void 0 === Object.create && (Object.create = function (b, c) {
            var a = d(b), e;
            for (e in c)g(a, e, c[e]);
            return a
        });
        d.definePropertyOf = g;
        d.defineInitPropertyOf = function (b, c, a, d, f) {
            d = m(d,
                {get: function () {
                    return this[c] = a.call(this, c, f)
                }, set: function (a) {
                    f.value = a;
                    g(this, c, f)
                }});
            g(b, c, d)
        };
        d.defineConstructorOf = function (b, c) {
            function a(a) {
                for (var b in a)this[b] = a[b]
            }

            a.prototype = b;
            a.name || (a.name = "Init");
            g(b, c || "constructor", {value: a, writable: !0, configurable: !0});
            return a
        };
        d.create = function (b, c) {
            return d(h, b, c)
        };
        d.by = function (b) {
            var c = {proto: k, create: l, constructor: r};
            if (b)if ("auto" === b)setTimeout(u, 0); else if (c.hasOwnProperty(b))m = c[b]; else throw new TypeError("Unknown clone method \u2014 " +
                b); else for (var a in c)if (m === c[a])return a
        };
        d.$call = function (b, c, a, e, f, g, h, k, l) {
            return d.prototype[c].call(b, a, e, f, g, h, k, l)
        };
        d.$apply = function (b, c, a) {
            return d.prototype[c].apply(b, a)
        };
        var t = {$clone: function (b, c) {
            return d(this, b, c)
        }, $extend: function (b, c) {
            var a = c ? d(this, b, c) : d(this, void 0, b);
            v(a);
            return a
        }}, s;
        for (s in t)g(h, s, {value: t[s], writable: !0, configurable: !0});
        d.defineConstructorOf(h);
        for (var w in h) {
            h = Object.prototype;
            break
        }
        return d
    }

    var p = k.clone;
    if ("object" === typeof module && module.exports)module.exports =
        l(); else if ("function" === typeof define)define(l); else {
        var q = k.clone = l();
        q.noConflict = function () {
            k.clone = p;
            return q
        }
    }
}("object" === typeof window && window || global);
//@ sourceMappingURL=clone.min.js.map
